name: R2R Docker Build and Integration Test

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Build R2R Docker image
      run: |
        docker build -t emrgntcmplxty/r2r:${{ github.sha }} .

    - name: Build R2R Docker image
      run: |
        docker build \
        --build-arg GITHUB_SHA=${{ github.sha }} \
        --build-arg GITHUB_REF=${{ github.ref }} \
        -t emrgntcmplxty/r2r:${{ github.sha }} .

    - name: Pull pgvector image
      run: docker pull pgvector/pgvector:pg16

    - name: Create Docker network
      run: docker network create r2r-network

    - name: Start Postgres
      run: |
        docker run -d --name postgres --network r2r-network \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=postgres \
          pgvector/pgvector:pg16

    - name: Ensure Postgres is ready
      run: timeout 60s bash -c 'until docker exec postgres pg_isready -h localhost -U ${POSTGRES_USER:-postgres}; do sleep 5; done'

    - name: Start R2R and capture logs
      run: |
        docker run -d --name r2r --network r2r-network \
          -e PYTHONUNBUFFERED=1 \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_HOST=postgres \
          -e POSTGRES_PORT=5432 \
          -e POSTGRES_DBNAME=postgres \
          -e POSTGRES_VECS_COLLECTION=vecs \
          -p 8000:8000 \
          emrgntcmplxty/r2r:${{ github.sha }}

        # Start tailing logs immediately
        docker logs -f r2r &

        # Wait for up to 60 seconds for the health check to pass or the container to exit
        timeout 60s bash -c '
          while true; do
            if docker exec r2r curl -s http://localhost:8000/v1/health | grep "ok"; then
              echo "R2R is healthy"
              exit 0
            fi
            if ! docker ps | grep -q r2r; then
              echo "R2R container has exited"
              exit 1
            fi
            sleep 5
          done
        '

        # Capture the full logs after the wait period
        echo "Full R2R logs:"
        docker logs r2r


    - name: View R2R container logs
      run: docker logs r2r

    - name: Ensure R2R is ready
      run: |
        timeout 60s bash -c 'until docker exec r2r curl -s http://localhost:8000/v1/health | grep "ok"; do sleep 5; done'

    - name: Run integration tests
      run: |
        echo "R2R Version:"
        docker exec r2r r2r version

    - name: Clean up
      if: always()
      run: |
        docker stop r2r postgres
        docker rm r2r postgres
        docker network rm r2r-network
        docker system prune -af --volumes
